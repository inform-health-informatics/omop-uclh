"""Utilities for managing and working with the OMOP CDM

[description]

Variables:

"""
import pandas as pd
import numpy as np
from collections import namedtuple

import utils.utils as utils

ConceptKeys = namedtuple('ConceptKeys', [
    'concept_id',   # OMOP CDM concept ID
    'shortName',    # something you can type when writing code
    'FSN'           # fully specified name (as per SNOMED approach)
])


cdm_tables = """concept vocabulary domain concept_class concept_relationship
relationship concept_synonym concept_ancestor source_to_concept_map
drug_strength cohort_definition attribute_definition cdm_source metadata person
observation_period specimen death visit_occurrence visit_detail
procedure_occurrence drug_exposure device_exposure condition_occurrence
measurement note note_nlp observation fact_relationship location care_site
provider payer_plan_period cost cohort cohort_attribute drug_era dose_era
condition_era concept vocabulary domain concept_class concept_relationship
relationship concept_synonym concept_ancestor source_to_concept_map
drug_strength cohort_definition attribute_definition cdm_source metadata person
observation_period specimen death visit_occurrence visit_detail
procedure_occurrence drug_exposure device_exposure condition_occurrence
measurement note note_nlp observation fact_relationship location care_site
provider payer_plan_period cost cohort cohort_attribute drug_era dose_era
condition_era""".split()


class OMOP_TABLE():
    """Data definition for OMOP CDM

    Store sufficient details of the table structure to permit interactions with
    the schema
    """

    version = 5.3
    url = 'https://github.com/OHDSI/CommonDataModel/releases/tag/v5.3.0'




class Measurement(OMOP_TABLE):

    # - [ ] @TODO: (2018-11-01) extract this programmatically
    ddl_string = """
    CREATE TABLE measurement
    (
      measurement_id                INTEGER     NOT NULL ,
      person_id                     INTEGER     NOT NULL ,
      measurement_concept_id        INTEGER     NOT NULL ,
      measurement_date              DATE        NOT NULL ,
      measurement_time              VARCHAR(10) NULL ,
      measurement_datetime          TIMESTAMP   NULL ,
      measurement_type_concept_id   INTEGER     NOT NULL ,
      operator_concept_id           INTEGER     NULL ,
      value_as_number               NUMERIC       NULL ,
      value_as_concept_id           INTEGER     NULL ,
      unit_concept_id               INTEGER     NULL ,
      range_low                     NUMERIC       NULL ,
      range_high                    NUMERIC       NULL ,
      provider_id                   INTEGER     NULL ,
      visit_occurrence_id           INTEGER     NULL ,
      visit_detail_id               INTEGER     NULL ,
      measurement_source_value      VARCHAR(50) NULL ,
      measurement_source_concept_id INTEGER     NULL ,
      unit_source_value             VARCHAR(50) NULL ,
      value_source_value            VARCHAR(50) NULL
    )
    ;
    """

    def __init__(self, ddl_string=ddl_string):

        self.ddl = ddl_string
        self.column_definitions = utils.parse_table_ddl(self.ddl)
        self.column_names = tuple(c.name for c in self.column_definitions)

    @staticmethod
    def __str__():
        """return just the table name in lower case"""
        return 'measurement'

    def list_of_dicts(self,
                      df: pd.DataFrame,
                      person_id: int,
                      visit_occurence_id: int,
                      **kwargs):
        """Prepare a list of dictionaries for SQLAlchemy insert statement

        Expects person and visit IDs plus a dataframe of measurements as a
        minimum; additional columns can be specified using keyword args
        Positional (mandatory) args for all non-nullable fields
        # - [ ] @TODO: (2018-11-01) @later: use a factory function approach that
        #   takes the column defintions and generates a function that in turn
        #   has the right mandatory positional args

        Arguments:
            person_id {int} -- person ID (integer)
            visit_occurence_id {int} -- visit occurence ID
            df {pd.DataFrame} -- dataframe generated by simulate
            - [ ] @TODO: (2018-11-01) add a common dictionary of such k:v pairs to the variable class definition
            **kwargs {[type]} -- key:value pairs that correspond to column names above
        """

        # Mandatory columns provided externally
        assert 'measurement_concept_id' in kwargs.keys()

        # Mandatory columns provided internally
        # measurement_id
        # - [ ] @TODO: (2018-11-02) this should autoincrement at the db level
        np.random.seed()
        _x = np.random.randint(1000000000)
        df.insert(0, 'measurement_id', df.index + _x)
        # measurement_date
        df['measurement_date'] = df['timestamp'].dt.date
        # measurement_type_concept
        df['measurement_type_concept_id'] = 44818702


        # rename to match column names
        df.rename(columns={'timestamp': 'measurement_datetime',
                   'value': 'value_as_number'}, inplace=True)
        # insert new columns
        df = df.assign(person_id=person_id,
                       visit_occurence_id=visit_occurence_id)
        # insert additional columns specified by keyword args
        if kwargs:
            assert all([k in self.column_names for k in kwargs.keys()])
            df = df.assign(**kwargs)
        print(df.loc[:5,])
        return df.to_dict('records')


class Observation(OMOP_TABLE):

    ddl_string = """
    CREATE TABLE observation
    (
      observation_id                INTEGER     NOT NULL ,
      person_id                     INTEGER     NOT NULL ,
      observation_concept_id        INTEGER     NOT NULL ,
      observation_date              DATE        NOT NULL ,
      observation_datetime          TIMESTAMP   NULL ,
      observation_type_concept_id   INTEGER     NOT NULL ,
      value_as_number               NUMERIC       NULL ,
      value_as_string               VARCHAR(60) NULL ,
      value_as_concept_id           INTEGER     NULL ,
      qualifier_concept_id          INTEGER     NULL ,
      unit_concept_id               INTEGER     NULL ,
      provider_id                   INTEGER     NULL ,
      visit_occurrence_id           INTEGER     NULL ,
      visit_detail_id               INTEGER     NULL ,
      observation_source_value      VARCHAR(50) NULL ,
      observation_source_concept_id INTEGER     NULL ,
      unit_source_value             VARCHAR(50) NULL ,
      qualifier_source_value        VARCHAR(50) NULL
    )
    ;
    """

    @staticmethod
    def __str__():
        """return just the table name in lower case"""
        return 'observation'
